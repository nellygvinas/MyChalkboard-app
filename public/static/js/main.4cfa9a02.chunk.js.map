{"version":3,"sources":["components/setup/Role.js","components/setup/Setup.js","components/user-pages/Signup.js","components/user-pages/Login.js","components/Home.js","components/setup/AddTeacher.js","components/setup/NewClass.js","components/setup/NewSchool.js","components/setup/AddClass.js","components/CountriesList.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","Setup","props","state","currentUser","userId","_id","fullName","email","role","classes","image","message","console","log","this","axios","put","process","withCredentials","then","responseFromServer","catch","err","setState","handleRole","to","pathname","onClick","assignTeacher","assignParent","Signup","password","event","target","name","value","preventDefault","post","userDoc","data","onUserChange","onSubmit","handleSubmit","onChange","genericSync","type","placeholder","Login","alert","response","Home","AddTeacher","search","e","searchTerm","allUsers","filteredUsers","filter","eachUser","toUpperCase","includes","visibleUsers","showFoundUsers","map","i","teacher","teacherId","classCode","creator","parents","classAdded","get","responseFromTheBackend","usersFound","className","NewClass","schoolName","location","schoolId","newClass","NewSchool","address","city","zip","schoolAdded","school","showAddedSchool","AddClass","searchClasses","visibleClasses","eachClass","key","theSchool","class","classCodeEntered","formClassCode","CountriesList","theCountriesFromAPI","fetch","responseFromRESTCOUNTRIESApi","json","countries","fetchCountries","oneCountry","App","syncCurrentUser","user","delete","handleLogout","exact","path","component","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4cfa9a02.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { Switch, Route, NavLink, Link } from \"react-router-dom\";\n\n\nexport default class Role extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      fullName: \"\",\n      email: \"\",\n      password:\"\",\n      role: \"Unassigned\",\n      classes: \"\",\n      image: \"\",\n      message: null\n      }\n    }\n\n    genericSync(event){\n      // console.log(\"what is: \", event.target.value)\n      const { name, value } = event.target;\n      this.setState({ [name]: value })\n    }\n\n    syncCurrentUSer(user){\n      this.setState({ currentUser: user })\n    }\n\n    handleSubmit (event){\n    // console.log(\"submitting form\");\n    event.preventDefault();\n\n    // axios.post(\n    //     // route we are hitting in the backend\n    //     `${process.env.REACT_APP_API_URL}/signup`,\n    //     // the data from the form (AKA req.body 🚀) that we are sending to this route to do the job\n    //     this.state,\n    //     // secure sending\n    //     { withCredentials: true }\n    // )\n    // .then( responseFromServer => {\n    //     // console.log(\"response is:\", responseFromServer);\n    //     const { userDoc } = responseFromServer.data;\n    //     this.props.onUserChange(userDoc);\n    // })\n    // .catch( err => console.log(\"Err in signup: \", err));\n\n    } //end of handleSubmit\n\n\n    render(){\n\n\n      return (\n\n        <div>\n\n           <h2>ROLE COMPONENT </h2>\n                \n\n\n\n\n\n\n\n        </div>\n      )\n\n\n\n\n    }  \n\n\n\n\n\n\n\n\n\n}","import React from \"react\";\nimport axios from \"axios\";\nimport { Switch, Route, NavLink, Link } from \"react-router-dom\";\nimport Role from \"../setup/Role\";\n\n\nexport default class Setup extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      currentUser: {\n        userId: this.props.currentUser._id,\n        fullName: this.props.currentUser.fullName,\n        email: this.props.currentUser.email,\n        role: this.props.currentUser.role\n      },\n      classes: \"\",\n      image: \"\",\n      message: null\n      }\n    }\n\n    componentDidMount(){\n      console.log(\"Setup component - Initial state upon mount\", this.state)\n    }\n\n    shouldComponentUpdate() {\n      console.log(\"Setup component - state upon update\", this.state)\n\n    }\n\n\n    handleRole(){\n    \n      console.log(\"submitting handle role\");\n\n      axios.put(\n          // route we are hitting in the backend\n          `${process.env.REACT_APP_API_URL}/setup/role`,\n          // the data from the form (AKA req.body 🚀) that we are sending to this route to do the job\n          this.state.role,\n          // secure sending\n          { withCredentials: true }\n        )\n        .then( responseFromServer => {\n            console.log(\"response is:\", responseFromServer);\n        })\n        .catch( err => console.log(\"Err in role setup: \", err)); \n\n    } //end of handleRole\n\n\n    assignAdmin() {\n      this.setState(({currentUser}) => ({currentUser: {\n        ...currentUser,\n        role: \"Admin\",\n      }}))\n    \n    console.log(\"State after assign Admin\", this.state.currentUser)\n    }\n\n    assignTeacher(){\n      this.setState({ role: \"Teacher\" })\n      console.log(\"This.state Role assigned as Teacher:\", this.state.role)\n      this.handleRole()\n    }\n\n    assignParent() {\n      this.setState({ role: \"Parent\" })\n      console.log(\"This.state Role assigned as Parent:\", this.state.role)\n      this.handleRole()\n    }\n\n\n\n\n    render(){\n\n      console.log(\"Do I have user props in Setup? This.props.currentUser: \", this.props.currentUser)\n\n      return (\n\n        <div>\n          <h1>SETUP COMPONENT</h1>\n\n           <h2> Welcome, {this.props.currentUser.fullName}! Please select your role: </h2>\n          \n\n          <div>\n           {/* <Link to= \"/setup/admin\" onClick={() => this.assignAdmin()}> Administrator </Link>\n          </div> */}\n\n          <Link to={{\n            pathname: '/setup/admin',\n            state: {\n              currentUser: {\n                userId: this.state.currentUser.userId,\n                fullName: this.props.currentUser.fullName,\n                email: this.props.currentUser.email,\n                role: \"Admin\"\n              }\n            }}\n            }> Administrator </Link>\n          </div>\n          \n           \n          <div>\n          <Link to= \"/setup/teacher\" onClick={this.assignTeacher}> Teacher </Link>\n          </div>\n\n          <div>\n          <Link to= \"/setup/parent\" onClick={this.assignParent}> Parent </Link>\n          </div>     \n           \n\n\n\n        </div>\n      )\n\n\n\n    }  \n\n} // end of Setup component\n\n","import React from \"react\";\nimport axios from \"axios\";\nimport Setup from \"../setup/Setup\";\nimport { Switch, Route, NavLink, Link } from \"react-router-dom\";\n// import { threadId } from \"worker_threads\";\n\nexport default class Signup extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            fullName: \"\",\n            email: \"\",\n            password:\"\",\n            message: null,\n            role: \"Unassigned\",\n        }\n    }\n\n    genericSync(event){\n        // console.log(\"what is: \", event.target.value)\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n\n    handleSubmit (event){\n        // console.log(\"submitting form\");\n        event.preventDefault();\n\n        axios.post(\n            // route we are hitting in the backend\n            `${process.env.REACT_APP_API_URL}/signup`,\n            // the data from the form (AKA req.body 🚀) that we are sending to this route to do the job\n            this.state,\n            // secure sending\n            { withCredentials: true }\n        )\n        .then( responseFromServer => {\n            const { userDoc } = responseFromServer.data;\n            this.props.onUserChange(userDoc);\n            console.log(\"userDoc from signup:\", userDoc);\n        })\n        .catch( err => console.log(\"Err in signup: \", err));\n    }\n\n    render(){\n        console.log(\"User props in Signup? This.props.currentUser: \", this.props.currentUser)\n        // console.log(\"The current user's role:\", this.props.currentUser[0])\n        // const userProps = {fullName: this.props.currentUser.fullName, email: this.props.currentUser.email, role: this.props.currentUser.role};\n        const { fullName, email, password, role } = this.state;\n        console.log(\"SIGNUP STATE: \", this.state);\n        if(this.props.currentUser){\n            return(\n            \n            <div>\n\n            <Setup \n              currentUser = { this.props.currentUser } \n            />         \n            </div>\n            )\n        }\n\n        return (\n            <section>\n                <h2> Sign up </h2>\n                <form onSubmit = {event => this.handleSubmit(event) } >\n                                        \n                    <label> Full name: </label>\n                    <input\n                        value={fullName} // this.state.fullName\n                        onChange = { event => this.genericSync(event) } \n                        type=\"text\"\n                        name=\"fullName\"\n                        placeholder=\"Jane Doe\"\n                    />\n\n                    <label> Email: </label>\n                    <input\n                        value={email} // this.state.email\n                        onChange = { event => this.genericSync(event) } \n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"my-email@ironhack.com\"\n                    />\n\n                    <label> Password</label>\n                    <input\n                        value={password} // this.state.password\n                        onChange = { event => this.genericSync(event) } \n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"***********\"\n                    />\n                    <button> Sign Up </button>\n                </form>\n                {/* if the message is not null (basically if there's a message) then show it in this <div> tag */}\n                { this.state.message && <div> { this.state.message } </div> }\n            \n            </section>\n\n\n\n\n\n        )\n    }\n}","import React from \"react\";\nimport axios from \"axios\";\n\n\nexport default class Login extends React.Component {\n\n    constructor(){\n        super();\n        this.state = {\n            email: \"\",\n            password:\"\",\n            message: null\n        }\n    }\n\n    genericSync(event){\n        // console.log(\"what is: \", event.target.value)\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit (event){\n        // console.log(\"submitting form\");\n        event.preventDefault();\n\n        axios.post(\n            // route we are hitting in the backend\n            `${process.env.REACT_APP_API_URL}/login`,\n            // the data from the form (AKA req.body 🚀) that we are sending to this route to do the job\n            this.state,\n            // secure sending\n            { withCredentials: true }\n        )\n        .then( responseFromServer => {\n            // console.log(\"response is:\", responseFromServer);\n            const { userDoc } = responseFromServer.data;\n            this.props.onUserChange(userDoc);\n            alert(\"You are logged in.\")\n        })\n        .catch( err => {\n            // console.log(\"err: \", err.response)\n            if(err.response.data) return this.setState({ message: err.response.data.message })\n        });\n    }\n\n\n\n    render(){\n        const { fullName, email, password } = this.state;\n\n        return (\n            <section>\n                <h2> Login </h2>\n                <form onSubmit ={ event => this.handleSubmit(event) } >\n            \n                    <label> Email: </label>\n                    <input\n                        value={email} // this.state.email\n                        onChange = { event => this.genericSync(event) } \n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"my-email@ironhack.com\"\n                    />\n\n                    <label> Password</label>\n                    <input\n                        value={password} // this.state.password\n                        onChange = { event => this.genericSync(event) } \n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"***********\"\n                    />\n                    <button> Login </button>\n                </form>\n                {/* if the message is not null (basically if there's a message) then show it in this <div> tag */}\n                { this.state.message && <div> { this.state.message } </div> }\n            </section>\n        )\n    }\n}","import React from \"react\";\n\n\nexport default class Home extends React.Component {\n\n    render(){\n        return (\n            <section>\n                <h1> Home Page </h1>\n                <p> Welcome to the best app ever! ❤️ </p>\n            </section>\n        )\n    }\n}","import React from \"react\";\nimport axios from \"axios\";\n// import { Switch, Route, NavLink, Link } from \"react-router-dom\";\n\nexport default class AddTeacher extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      teacher: null,\n      teacherId: null,\n      allUsers: null,\n      visibleUsers: null,\n      searchTerm: \"\",\n      // schoolName: this.props.location.state.schoolName,\n      // schoolId: this.props.location.state.schoolId,\n      classCode: null,\n      creator: \"\",\n      image: \"\",\n      parents: \"\",\n      message: null,\n      classAdded: false\n      }\n    }\n\n\n    componentDidMount (){\n\n      axios.get(`${process.env.REACT_APP_API_URL}/getusers`, { withCredentials: true })\n      .then( responseFromTheBackend => {\n        console.log(\"Users found: \", responseFromTheBackend.data.usersFound)\n        this.setState({ allUsers: responseFromTheBackend.data.usersFound });\n\n        })\n      .catch(err => console.log(\"Err while searching for teacher: \", err))\n\n    }\n\n  \n    search = (e) =>{\n      \n      this.setState({searchTerm: e.target.value }, ()=>{\n  \n      \n        let clone = [...this.state.allUsers];\n        \n        let filteredUsers = this.state.allUsers.filter((eachUser)=>{\n          console.log(\"eachUser is:\", eachUser)\n        return eachUser.fullName.toUpperCase().includes(this.state.searchTerm.toUpperCase())\n  \n      })\n          this.setState({visibleUsers: filteredUsers})\n      })\n    }\n\n\n    showFoundUsers = () =>{\n\n      return this.state.visibleUsers.map((eachUser, i)=>{\n  \n        return( \n        \n        <div>  \n        <label>User: </label> {eachUser.fullName}\n\n        <button> Add as Teacher </button>\n\n        </div>  \n    \n        )\n  \n      })\n  \n    }\n\n\n\n    render(){\n\n      return (\n        <div>\n\n        <h4 className=\"title\"> Add Teacher</h4>\n        <label>Search for Teacher:</label><input onChange={this.search}\n         value={this.state.searchTerm}>\n        </input>\n\n         {this.state.visibleUsers && <div>\n\n          <h4>Found users:</h4> \n          {this.showFoundUsers()}\n         </div>}\n\n\n        </div>\n\n\n      )\n\n\n    }\n\n\n\n\n  }\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Switch, Route, NavLink, Link } from \"react-router-dom\";\nimport AddTeacher from \"./AddTeacher\"\n\n\nexport default class NewClass extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      className: \"\",\n      teacher: null,\n      teacherId: null,\n      schoolName: this.props.location.state.schoolName,\n      schoolId: this.props.location.state.schoolId,\n      classCode: null,\n      creator: \"\",\n      image: \"\",\n      parents: \"\",\n      message: null,\n      classAdded: false\n      }\n    }\n\n    componentDidMount(){\n      console.log(\"This is a new class\");\n      console.log(\"School props: \", this.props.location.state)\n    }\n\n\n    genericSync(event){\n      console.log(\"The event.target is: \", event.target.value)\n      const { name, value } = event.target;\n      this.setState({ [name]: value });\n    }\n\n    handleSubmit (event){\n      console.log(\"Form submitted. State is:\", this.state);\n      event.preventDefault();\n\n        axios.post(\n            // route we are hitting in the backend\n            `${process.env.REACT_APP_API_URL}/setup/class`,\n            // the data from the form (AKA req.body 🚀) that we are sending to this route to do the job\n            this.state,\n            // secure sending\n            { withCredentials: true }\n        )\n        .then( responseFromServer => {\n            console.log(\"Response from server after post for New Class is:\", responseFromServer.data.newClass);\n            this.setState({ classCode: responseFromServer.data.newClass.classCode, classAdded: true, \n              creator: responseFromServer.data.newClass.creator }, \n              () => {\n                console.log(\"State after post, class added and creator assigned:\", this.state)\n            });\n            \n        })\n        .catch( err => console.log(\"Err in class setup: \", err));\n  }\n\n\n    render(){\n\n      // const teacherAdded = this.state.teacher;\n      // let button;\n      // console.log(teacherAdded)\n\n      // if (!teacherAdded) {\n      // <AddTeacher  />;\n      // } else {\n    \n      // }\n\n      return (\n        <div>\n\n         <h1>CREATE A NEW CLASS</h1> \n\n              <form onSubmit ={ event => this.handleSubmit(event) } >\n            \n                    <label> Class Name: </label>\n                    <input\n                        // value={schoolName} // this.state.schoolName\n                        onChange = { event => this.genericSync(event) } \n                        type=\"text\"\n                        name=\"className\"\n                        placeholder=\"Mr. Smith's Homeroom \"\n                    />\n\n                    <button> Create Class </button>\n              </form>\n\n              {this.state.classAdded && <div>\n\n                 <h3> You created a new class: </h3>\n                  <div>\n                    <label>Class Name: </label> \n                    {this.state.className}\n                  </div>\n                 \n                  <div>\n                    <label>Class Code: </label> \n                    {this.state.classCode}\n                  </div>\n                  \n                  <div>\n                    \n                    <label>Class Teacher: </label> \n                    \n                    {!this.state.teacher && <div> {!this.state.teacher}\n                    No Teacher Assigned \n                    <AddTeacher>\n\n                    </AddTeacher>\n                    </div>}\n\n                  </div>\n                  \n                \n                </div> }\n                \n                \n                {/* if the message is not null (basically if there's a message) then show it in this <div> tag */}\n                { this.state.message && <div> { this.state.message } </div> }\n          \n\n\n        </div>    \n        // end of containing div\n\n\n      )\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n}","import React from \"react\";\nimport axios from \"axios\";\nimport { Switch, Route, NavLink, Link } from \"react-router-dom\";\nimport NewClass from \"../setup/NewClass\"\n\n\n\nexport default class NewSchool extends React.Component {\n  \n  constructor(props){\n    super(props);\n    this.state = {\n      currentUser: {\n        userId: this.props.location.state.currentUser.userId,\n        fullName: this.props.location.state.currentUser.fullName,\n        email: this.props.location.state.currentUser.email,\n        role: this.props.location.state.currentUser.role\n        },\n      schoolName: \"\",\n      address: \"\",\n      city:\"\",\n      state: \"\",\n      zip: \"\",\n      role: \"Admin\",\n      image: \"\",\n      message: null,\n      schoolAdded: false,\n      schoolId: \"\"\n    }\n  }\n  \n  \n  componentDidMount(){\n    console.log(\"State upon mount - New school component: \", this.state)\n    const userRole = this.state.currentUser.role\n\n    axios.put(\n      // route we are hitting in the backend\n      `${process.env.REACT_APP_API_URL}/setup/role`,\n      // the data from the form (AKA req.body 🚀) that we are sending to this route to do the job\n      this.state.currentUser,\n      // secure sending\n      { withCredentials: true }\n    )\n    .then( responseFromServer => {\n        console.log(\"Response from server after role post is:\", responseFromServer.data);\n    })\n    .catch( err => console.log(\"Err in role setup: \", err)); \n    \n  }\n\n\n  \n  showAddedSchool(){\n    \n    if (this.state.schoolAdded)\n    \n    return(\n      \n      <div>\n\n          <h3>The School has been added: {this.state.schoolName}</h3>\n          <h4>School Address: {this.state.address}</h4>\n          {this.state.city}\n          {this.state.state}\n          {this.state.zip}\n\n        <div>\n        <Link to={{\n          pathname: \"/setup/class\",\n          state: {\n          schoolId: this.state.schoolId,\n          schoolName: this.state.schoolName\n          }\n          }}>Add Classes</Link>\n\n        </div>   \n          \n          </div>\n        )\n        \n      }\n      \n      \n      genericSync(event){\n        // console.log(\"The event.target is: \", event.target.value)\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n        console.log(\"The state while changing:\", this.state)\n      }\n      \n      handleSubmit (event){\n        \n        event.preventDefault();\n        this.setState({ schoolAdded: true });\n        \n        axios.post(\n          // route we are hitting in the backend\n          `${process.env.REACT_APP_API_URL}/setup/school`,\n          // the data from the form (AKA req.body 🚀) that we are sending to this route to do the job\n          this.state,\n          // secure sending\n          { withCredentials: true }\n          )\n          .then( responseFromServer => {\n            console.log(\"Response from server after post is:\", responseFromServer.data);\n            \n            // if(responseFromServer.data) return this.setState({ message: responseFromServer.data.message })\n            this.setState({ schoolId: responseFromServer.data.school._id });\n            \n            console.log(\"Form submitted. The state is:\", this.state);\n          })\n          .catch( err => {\n            // console.log(\"Err in school setup: \", err)\n            if(err.data) return this.setState({ message: err.data.message }) \n          })\n          \n          \n        }\n        \n        \n      render(){\n          \n        return (\n        <div>\n\n         <h1>PLEASE CREATE A NEW SCHOOL</h1> \n\n              <form onSubmit ={ event => this.handleSubmit(event) } >\n            \n                    <label> School Name: </label>\n                    <input\n                        // value={schoolName} // this.state.schoolName\n                        onChange = { event => this.genericSync(event) } \n                        type=\"text\"\n                        name=\"schoolName\"\n                        placeholder=\"MyChalkboard Academy\"\n                    />\n\n                    <label> Address: </label>\n                    <input\n                        // value={address} // this.state.address\n                        onChange = { event => this.genericSync(event) } \n                        type=\"text\"\n                        name=\"address\"\n                        placeholder=\"12345 Main Drive\"\n                    />\n\n                    <label> City: </label>\n                    <input\n                        // value={address} // this.state.address\n                        onChange = { event => this.genericSync(event) } \n                        type=\"text\"\n                        name=\"city\"\n                        placeholder=\"Miami\"\n                    />\n\n                    <label> State: </label>\n                    <input\n                        // value={address} // this.state.address\n                        onChange = { event => this.genericSync(event) } \n                        type=\"text\"\n                        name=\"state\"\n                        placeholder=\"FL\"\n                    />\n\n                    <label> Zip: </label>\n                    <input\n                        // value={address} // this.state.address\n                        onChange = { event => this.genericSync(event) } \n                        type=\"text\"\n                        name=\"zip\"\n                        placeholder=\"Miami\"\n                    />\n\n                    <button> Create School </button>\n                </form>\n\n                {/* if the message is not null (basically if there's a message) then show it in this <div> tag */}\n                { this.state.message && <div> { this.state.message } </div> }\n\n                { this.state.schoolAdded && <div> { this.state.message } </div> }\n          \n            \n            {this.showAddedSchool()}\n\n\n        </div>\n\n\n      )\n\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n}","import React from \"react\";\nimport axios from \"axios\";\nimport { Switch, Route, NavLink, Link } from \"react-router-dom\";\nimport ClassBox from \"../class/ClassBox\"\n\nexport default class AddClass extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      class: [],\n      classCode: \"\",\n      message: null,\n      classCodeEntered: false\n      }\n    }\n\n\n    searchClasses = () =>{\n\n      return this.state.visibleClasses.map((eachClass, i)=>{\n  \n        return(\n          <ClassBox key={i} \n          className={eachClass.className}\n          classCode={eachClass.classCode}\n          theSchool={eachClass.schoolName}\n           />\n        )\n  \n      })\n  \n    }\n\n\n    genericSync(event){\n      console.log(\"Event Target Value: \", event.target.value)\n      // const { name, value } = event.target;\n      this.setState({ [event.target.name]: event.target.value });\n      console.log(\"The state is\", this.state)\n    }\n\n\n    handleSubmit (event){\n      console.log(\"Form submitted\");\n      event.preventDefault();\n\n      this.setState({ classCodeEntered: true });\n\n      const formClassCode = this.state.classCode\n      console.log(\"The state is\", this.state.classCode)\n\n      axios.get(\n          // route we are hitting in the backend\n          `${process.env.REACT_APP_API_URL}/setup/class/code`,\n          // the data from the form (AKA req.body 🚀) that we are sending to this route to do the job\n          formClassCode,\n          // secure sending\n          { withCredentials: true }\n      )\n      .then( responseFromServer => {\n          console.log(\"Class found is:\", responseFromServer.data);\n          // const { classesDoc } = responseFromServer.data;\n\n          // this.setState({ class: classesDoc });\n          \n      })\n      .catch( err => {\n        console.log(\"Error while adding class: \", err)\n        this.setState({ message: err });\n        }\n      );\n  }\n\n\n    render(){\n\n      console.log(this.props)\n      return (\n        <div>\n\n         <h1>PLEASE ENTER YOUR CLASS CODE</h1> \n\n              <form onSubmit ={ event => this.handleSubmit(event) } >\n            \n                    <label> Class Code: </label>\n                    <input\n                        // value={schoolName} // this.state.schoolName\n                        onChange = { event => this.genericSync(event) } \n                        type=\"text\"\n                        name=\"classCode\"\n                        placeholder=\"123XYZ\"\n                    />\n        \n                    <button> Submit Class Code </button>\n                </form>\n\n                {/* if the message is not null (basically if there's a message) then show it in this <div> tag */}\n                { this.state.message && <div> { this.state.message } </div> }\n\n                { this.state.classCodeEntered && <div> \n                \n                <h3>Classes Found:</h3>\n\n                <div>\n                  {this.state.class[0]}\n                </div>\n                  \n                    \n                </div> }\n          \n\n\n        </div>\n\n\n      )\n\n    }\n\n\n\n\n\n\n\n}  // end of Class","import React from \"react\";\n\n\nexport default class CountriesList extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n           theCountriesFromAPI: []\n        }\n    }\n\n\n    // componentDidMount(){\n    //     axios.get(\"https://restcountries.eu/rest/v2/all\")\n    //     .then(responseFromRESTCOUNTRIESApi => {\n    //         // console.log(\"Response is: \", responseFromRESTCOUNTRIESApi.data)\n    //         this.setState({ theCountriesFromAPI: responseFromRESTCOUNTRIESApi.data })        \n    //     })\n    //     .catch(err =>console.log(\"Err while getting countries: \", err))\n    // }\n\n    // THE SAME AS ABOVE JUST USING FETCH\n    // componentDidMount(){\n    //     fetch(\"https://restcountries.eu/rest/v2/all\")\n    //     .then(responseFromRESTCOUNTRIESApi => {\n    //         // console.log(\"Response is: \", responseFromRESTCOUNTRIESApi.json())\n    //         return responseFromRESTCOUNTRIESApi.json()\n    //     })\n    //     .then(countries => this.setState({ theCountriesFromAPI: countries }))\n    //     .catch(err =>console.log(\"Err while getting countries: \", err))\n    // }\n\n\n    // the same as above just creating the regular method\n    fetchCountries(){\n        fetch(\"https://restcountries.eu/rest/v2/all\")\n        .then(responseFromRESTCOUNTRIESApi => {\n            // console.log(\"Response is: \", responseFromRESTCOUNTRIESApi.json())\n            return responseFromRESTCOUNTRIESApi.json()\n        })\n        .then(countries => this.setState({ theCountriesFromAPI: countries }))\n        .catch(err =>console.log(\"Err while getting countries: \", err))\n    }\n\n\n    render(){\n        const { theCountriesFromAPI } = this.state;\n        return (\n            <div>\n                {/* INVOKE METHOD HERE */}\n                { this.fetchCountries() } \n\n                <ul>\n                    { theCountriesFromAPI.map((oneCountry, i) => {\n                            return (\n                                <li key={i}> {oneCountry.name} </li>\n                            )\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport { Switch, Route, NavLink, Link } from \"react-router-dom\";\n\nimport Signup from \"./components/user-pages/Signup\";\nimport Login from \"./components/user-pages/Login\";\nimport Setup from \"./components/setup/Setup\";\n// import Logout from \"./components/user-pages/Logout\"\nimport Home from \"./components/Home\";\nimport Role from \"./components/Home\";\nimport NewSchool from \"./components/setup/NewSchool\"\nimport NewClass from \"./components/setup/NewClass\"\nimport AddClass from \"./components/setup/AddClass\"\n\n\nimport CountriesList from \"./components/CountriesList\";\n\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    \n    this.state = {\n      currentUser: null\n    }\n  }\n\n  componentDidMount(){\n    axios.get(`${process.env.REACT_APP_API_URL}/checkuser`, { withCredentials: true })\n    .then( responseFromTheBackend => {\n      console.log(\"User in APP.JS: \", responseFromTheBackend)\n      const { userDoc } = responseFromTheBackend.data;\n      this.syncCurrentUser(userDoc);\n    })\n    .catch(err => console.log(\"Err while getting the user from the checkuser route: \", err))\n  }\n\n  syncCurrentUser(user){\n    this.setState({ currentUser: user })\n  }\n\n\n  handleLogout(event){\n    console.log(\"Handling logout\");\n    event.preventDefault();\n\n    axios.delete(`${process.env.REACT_APP_API_URL}/logout`,\n        this.state,\n        // secure sending\n        { withCredentials: true }\n    )\n    .then( responseFromServer => {\n        console.log(\"response is:\", responseFromServer.data, \"the props ----- \", this.props);\n        let userDoc = responseFromServer.data.userDoc;\n        // this.props.onUserChange(userDoc);\n        this.syncCurrentUser(userDoc);\n        alert(\"You are logged out.\")\n    })\n    .catch( err => {\n        console.log(\"err: \", err)\n        // if(err.response.data) return this.setState({ message: err.response.data.message })\n    });\n}\n\n\n\n\n  render (){   \n    // console.log(\"the state in APPJS: \", this.state);\n    return (\n      <div >\n        <header>\n          <nav>\n            <NavLink to=\"/\" > Home </NavLink>\n            {/* If no current user, signup will show. */}\n            { !this.state.currentUser && <NavLink to=\"/signup\"> Signup </NavLink> }\n            { !this.state.currentUser && <div> <NavLink to=\"/login\"> Login </NavLink> </div> }\n            <NavLink to=\"/countries\" > Countries </NavLink>\n          </nav>\n            { this.state.currentUser && <Link to=\"/logout\" onClick ={ event => this.handleLogout(event)}> Logout </Link> }  \n        </header>\n        <Switch>\n        {/* this is example how we would render component normally */}\n        {/* <Route exact path=\"/somePage\" component={ someComponentThatWillRenderWhenThisRouteIsHit }   /> */}\n          <Route exact path=\"/\" component={ Home }   /> \n          <Route exact path=\"/countries\" component={ CountriesList }  /> \n          <Route exact path=\"/setup/admin\" component={ NewSchool }   /> \n          <Route exact path= \"/setup/teacher\" component={ NewClass }/> \n          <Route exact path= \"/setup/parent\" component={ AddClass }/> \n          <Route exact path= \"/setup/class\" component={ NewClass }/> \n          {/* if we have to pass some props down to a component,\n          we can't use a standard way of rendering using component={},\n          but instead we have to use render = {}  like in the example below */}\n          <Route exact path=\"/signup\" render = { () => \n            <Signup \n              currentUser = { this.state.currentUser }   \n              onUserChange = { userDoc => this.syncCurrentUser(userDoc) }   \n            /> \n          }/>\n\n          {<Route exact path=\"/login\" render = { () => \n            <Login \n              currentUser = { this.state.currentUser }   \n              onUserChange = { userDoc => this.syncCurrentUser(userDoc) }   \n            /> \n          }/>}\n\n          \n\n          \n\n        </Switch>\n          \n          {/* <CountriesList /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}